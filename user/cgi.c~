/*
Some random cgi routines.
*/

/*
 * ----------------------------------------------------------------------------
 * "THE BEER-WARE LICENSE" (Revision 42):
 * Jeroen Domburg <jeroen@spritesmods.com> wrote this file. As long as you retain 
 * this notice you can do whatever you want with this stuff. If we meet some day, 
 * and you think this stuff is worth it, you can buy me a beer in return. 
 * ----------------------------------------------------------------------------
 */


#include <string.h>
#include <osapi.h>
#include "user_interface.h"
#include "mem.h"
#include "httpd.h"
#include "cgi.h"
#include "io.h"
#include "espmissingincludes.h"
#include "g35.h"

//cause I can't be bothered to write an ioGetLed()
static char currLedState=0;

//Cgi that turns the LED on or off according to the 'led' param in the POST data
int ICACHE_FLASH_ATTR cgiLed(HttpdConnData *connData) {
	int len;
	char buff[1024];
	
	if (connData->conn==NULL) {
		//Connection aborted. Clean up.
		return HTTPD_CGI_DONE;
	}

	len=httpdFindArg(connData->postBuff, "led", buff, sizeof(buff));
	if (len!=0) {
		currLedState=atoi(buff);
		ioLed(currLedState);
	}

	httpdRedirect(connData, "led.tpl");
	return HTTPD_CGI_DONE;
}

int ICACHE_FLASH_ATTR cgi_g35_led(HttpdConnData *connData) {
	int len;
	char buff[1024];
	char addr,r,g,b,br;
	addr=0;
	r=0;
	g=0;
	b=0;
	br=0;	
	
	if (connData->conn==NULL) {
		//Connection aborted. Clean up.
		return HTTPD_CGI_DONE;
	}

	len=httpdFindArg(connData->postBuff, "r", buff, sizeof(buff));
	if (len!=0) {
		r=(char)atoi(buff);
	}
	len=httpdFindArg(connData->postBuff, "g", buff, sizeof(buff));
	if (len!=0) {
		g=(char)atoi(buff);
	}
	len=httpdFindArg(connData->postBuff, "b", buff, sizeof(buff));
	if (len!=0) {
		b=(char)atoi(buff);
	}
	len=httpdFindArg(connData->postBuff, "br", buff, sizeof(buff));
	if (len!=0) {
		br=(char)atoi(buff);
	}
	len=httpdFindArg(connData->postBuff, "addr", buff, sizeof(buff));
	if (len!=0) {
		addr=(char)atoi(buff);
	}
	g35_sendframe(addr,br,r,g,b);
	httpdRedirect(connData, "g35.tpl");
	return HTTPD_CGI_DONE;
}

int ICACHE_FLASH_ATTR cgi_g35_pattern(HttpdConnData *connData) {
	int len;
	char buff[1024];
	int pattern = get_cur_pattern();
	if (connData->conn==NULL) {
		//Connection aborted. Clean up.
		return HTTPD_CGI_DONE;
	}

	len=httpdFindArg(connData->postBuff, "sel", buff, sizeof(buff));
	if (len!=0) {
		pattern=atoi(buff);
		set_cur_pattern(pattern);
	}
	len=httpdFindArg(connData->postBuff, "rotate", buff, sizeof(buff));
	if(len!=0) {
		if(!os_strcmp(buff,"y"))
			set_rotate_pattern(1);
		else
			set_rotate_pattern(0);
	}else
		set_rotate_pattern(0);
	
	g35_pattern * patterns = get_patterns();
	g35_pattern * next = patterns;
	int count = 0;
	char ecbuf[12];
	while(next[count].g35_pattern_ticker!=NULL){
		os_sprintf(ecbuf,"enable_%d",count);
		len=httpdFindArg(connData->postBuff, ecbuf, buff, sizeof(buff));
		//os_printf("Len:%d\n",len);
		if(len>0) {
			//os_printf("Found it!\n");
			next[count].enabled=1;	
		}else
			next[count].enabled=0;
		count++;
	}
	httpdRedirect(connData, "g35.tpl");
	return HTTPD_CGI_DONE;
}

//Template code for the led page.
void ICACHE_FLASH_ATTR tplLed(HttpdConnData *connData, char *token, void **arg) {
	char buff[128];
	if (token==NULL) return;

	os_strcpy(buff, "Unknown");
	if (os_strcmp(token, "ledstate")==0) {
		if (currLedState) {
			os_strcpy(buff, "on");
		} else {
			os_strcpy(buff, "off");
		}
	}
	espconn_sent(connData->conn, (uint8 *)buff, os_strlen(buff));
}

static long hitCounter=0;

//Template code for the counter on the index page.
void ICACHE_FLASH_ATTR tplCounter(HttpdConnData *connData, char *token, void **arg) {
	char buff[128];
	if (token==NULL) return;

	if (os_strcmp(token, "counter")==0) {
		hitCounter++;
		os_sprintf(buff, "%ld", hitCounter);
	}
	espconn_sent(connData->conn, (uint8 *)buff, os_strlen(buff));
}


void ICACHE_FLASH_ATTR tpl_g35_json(HttpdConnData *connData, char *token, void **arg) {
	char rpbuff[2048];
	char singbuff[64];
	if (token==NULL) return;
	rpbuff[0]=0;
	if (os_strcmp(token, "ptrnjson")==0) {
		g35_pattern * patterns = get_patterns();
		os_strcat(rpbuff,"[");
		int i=0;
		while(patterns[i].g35_pattern_ticker!=NULL){
			os_sprintf(singbuff,"{'id':%d,'n':'%s','e':%d},",i,patterns[i].name,patterns[i].enabled);
			os_strcat(rpbuff,singbuff);
			i++;
		}
		os_strcat(rpbuff,"]");
	}
	espconn_sent(connData->conn, (uint8 *)rpbuff, os_strlen(rpbuff));
}


//Cgi that reads the SPI flash. Assumes 512KByte flash.
int ICACHE_FLASH_ATTR cgiReadFlash(HttpdConnData *connData) {
	int *pos=(int *)&connData->cgiData;
	if (connData->conn==NULL) {
		//Connection aborted. Clean up.
		return HTTPD_CGI_DONE;
	}

	if (*pos==0) {
		os_printf("Start flash download.\n");
		httpdStartResponse(connData, 200);
		httpdHeader(connData, "Content-Type", "application/bin");
		httpdEndHeaders(connData);
		*pos=0x40200000;
		return HTTPD_CGI_MORE;
	}
	espconn_sent(connData->conn, (uint8 *)(*pos), 1024);
	*pos+=1024;
	if (*pos>=0x40200000+(512*1024)) return HTTPD_CGI_DONE; else return HTTPD_CGI_MORE;
}

